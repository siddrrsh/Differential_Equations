function output = RK4(f, y0, x, x1, n)  h = (x1-x)/n;  y = y0;  for i=1:n    k1 = f(x,y);    k2 = f(x+(h/2),y + (h/2)*k1);    k3 = f(x+(h/2),y + (h/2)*k2);    k4 = f(x + h,y + h*k3);    m = (1/6)*(k1 + 2*k2 + 2*k3 + k4);    y = y + h*m;    x = x + h;   end   output = y;end% Runge Kutta for a System of ODEs% All we change is the inputs to vectors (allow the program to solve a system)% For RK4, we keep the program the same. In RK6, we would need 6 slopes for the analytic approximation% Application of RK4% I tested this for the problem: y'' - y' -2y =4 t^2, y(0)=1,y'(0)=4% I tested the RK4 for the system and got: 12.513947 (100 intervals)% I did the problem by hand and got 12.514 (Laplace from notes)% Application of RK4 2.0% I converted the given equations to solve for y1' and y2'% I got the new system: y1’ = -x^2 + y2 + x, y2’ = 2x^2 - y2 - x% I created 2 separate matrix (one with x, one with y1/y2)% ys: [0 1; 0 -1], xs: [x^2 ; x][-1 1; 2 -1]% Plugged in: f = @(x, y) A * y + [x^2; x] * [-1, 1; 2, -1]% RK4(f, A*y, [1;0], 0, 1, 100)% Outputs: One was close to 1, one was around 1.5% Fixes to RK4 2.0% I fixed F to this: f = @(x,y) A*y + [x^2]*[-1;2] + [x]*[1;-1], where A is [0 1; 0 -1]% Plugged the new function -> RK4(f, A*y, [1;0], 0, 1, 100)% I checked via the Laplace IVP and got similar results: 1.17273e+00 and 1.606028e-01